{"backend_state":"running","connection_file":"/projects/f7fa2993-872e-407d-a554-25861b23781f/.local/share/jupyter/runtime/kernel-46cc1095-b269-4680-b276-a5e52b2b3f32.json","kernel":"cv_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"colab":{"name":"Mastermind.ipynb","provenance":[]},"language_info":{"name":"python"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1660060277430,"exec_count":1,"id":"e921eb","input":"#start with a decimal\nmy_decimal = 150000.0\nprint(\"my_decimal:\", my_decimal)\n","kernel":"cv_env","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MJ2biGAUG77u","outputId":"9b0571f0-f867-4fac-e2bf-84fec90378bb"},"no_halt":true,"output":{"0":{"name":"stdout","text":"my_decimal: 150000.0\n"}},"pos":2,"start":1660060277419,"state":"done","type":"cell"}
{"cell_type":"code","end":1660060277437,"exec_count":2,"id":"798fa8","input":"my_integer = int(my_decimal) #convert the decimal into an integer\nprint(\"my_integer:\", my_integer)","kernel":"cv_env","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6GbIe7mMHeOz","outputId":"9cfb5b3d-61ab-4f36-a9a8-866849e6be80"},"no_halt":true,"output":{"0":{"name":"stdout","text":"my_integer: 150000\n"}},"pos":4,"start":1660060277434,"state":"done","type":"cell"}
{"cell_type":"code","end":1660060277444,"exec_count":3,"id":"870d7e","input":"my_string = str(my_integer) #convert the integer into a string.\nprint(\"string_number:\", my_string)","kernel":"cv_env","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5U_EISMqHeG0","outputId":"b527d926-d35e-4484-8707-19f6eb82e619"},"no_halt":true,"output":{"0":{"name":"stdout","text":"string_number: 150000\n"}},"pos":6,"start":1660060277439,"state":"done","type":"cell"}
{"cell_type":"code","end":1660060277453,"exec_count":4,"id":"1aa35e","input":"print(my_string[0], my_string[1], my_string[2], my_string[3], my_string[4], my_string[5])","kernel":"cv_env","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VuYJEIrHHtvS","outputId":"92e67438-8377-4c41-9443-19f5ddff9a4e"},"no_halt":true,"output":{"0":{"name":"stdout","text":"1 5 0 0 0 0\n"}},"pos":8,"start":1660060277447,"state":"done","type":"cell"}
{"cell_type":"code","end":1660060284254,"exec_count":6,"id":"aa7d1b","input":"for i in range(len(my_string)):\n  print(my_string[i])","kernel":"cv_env","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"P2n9yz-9Hd-V","outputId":"0d4f2a26-314b-4720-a4ef-6ecbcaffc2ed"},"no_halt":true,"output":{"0":{"name":"stdout","text":"1\n5\n0\n0\n0\n0\n"}},"pos":9,"start":1660060284250,"state":"done","type":"cell"}
{"cell_type":"code","end":1660060301303,"exec_count":10,"id":"5de639","input":"# Loop until the number guessed is equal to the hidden random number\n# in each loop, process the user's guess and reveal which digits or numbers the user got correct each round. \n","kernel":"cv_env","metadata":{"id":"r7xV_F6pSiAS"},"no_halt":true,"pos":17,"start":1660060301299,"state":"done","type":"cell"}
{"cell_type":"code","end":1660060884789,"exec_count":14,"id":"f0ef06","input":"#get a four digit integer between 1000 and 9999 and set it to a variable.\nimport random\n#random.randint(1000, 9999)\n#random.seed(100)\nanswer = random.randint(1000,9999)\ncount = 0\nprint(answer)","kernel":"cv_env","metadata":{"id":"2IAA6A4ZnLXx"},"output":{"0":{"name":"stdout","text":"9584\n"}},"pos":11,"start":1660060884780,"state":"done","type":"cell"}
{"cell_type":"code","end":1660060895217,"exec_count":15,"id":"cc27b3","input":"#prompt the user for input and set the guess to an integer.\nuserguess = int(input(\"Guess the number!\"))\nuserguess = str(userguess)","kernel":"cv_env","metadata":{"id":"djIIncFBFQ1_"},"output":{"0":{"name":"input","opts":{"password":false,"prompt":"Guess the number!"},"value":"1234"}},"pos":13,"scrolled":false,"start":1660060891353,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":27,"id":"8d99ee","input":"#directions\nprint(\"let's play the game mastermind\")\nprint(\"the answer is four digits\")\nprint(\"good luck\")\n#Mastermind\nimport random\ncount, v= 7, 0\nnp.random.seed(41)\nnumber = random.randint(1000, 9999)\nfor c in range(count):\n    userguess = input()\n    user = int(userguess)\n    print('guess:', user)\n    if user == number:\n        print('Great! You got it right!')\n    else:\n        print('lol')\n        number_string = str(number)\n        user_string = str(user)\n        for i in range(3):\n            if number_string[i] == user_string[i]:\n                print('Your guess', number_string[i], 'at position', i + 1, 'was correct!')\n                v=1\n            elif number_string[i] in user_string:\n                print('Your guess', number_string[i], 'is correct but placed wrong')\n                v=1\n            elif v==0:\n                print('Completly wrong answer')\n        c += 1\n        print('You have',7 - c,'tries left')","kernel":"cv_env","metadata":{"id":"28KLAYM7SlPC"},"output":{"0":{"name":"stdout","text":"let's play the game mastermind\nthe answer is four digits\ngood luck\n"},"1":{"name":"input","opts":{"password":false,"prompt":""},"value":"1234"},"10":{"ename":"KeyboardInterrupt","evalue":"Interrupted by user","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","Input \u001b[0;32mIn [27]\u001b[0m, in \u001b[0;36m<cell line: 11>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[38;5;66;03m# print(number)\u001b[39;00m\n\u001b[1;32m     11\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m c \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(count):\n\u001b[0;32m---> 12\u001b[0m     userguess \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43minput\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     13\u001b[0m     user \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mint\u001b[39m(userguess)\n\u001b[1;32m     14\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mguess:\u001b[39m\u001b[38;5;124m'\u001b[39m, user)\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/ipykernel/kernelbase.py:1075\u001b[0m, in \u001b[0;36mKernel.raw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m   1071\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_allow_stdin:\n\u001b[1;32m   1072\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m StdinNotImplementedError(\n\u001b[1;32m   1073\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mraw_input was called, but this frontend does not support input requests.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   1074\u001b[0m     )\n\u001b[0;32m-> 1075\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_input_request\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1076\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mstr\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mprompt\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1077\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_parent_ident\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mshell\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1078\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_parent\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mshell\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1079\u001b[0m \u001b[43m    \u001b[49m\u001b[43mpassword\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m   1080\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/ipykernel/kernelbase.py:1120\u001b[0m, in \u001b[0;36mKernel._input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m   1117\u001b[0m             \u001b[38;5;28;01mbreak\u001b[39;00m\n\u001b[1;32m   1118\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyboardInterrupt\u001b[39;00m:\n\u001b[1;32m   1119\u001b[0m     \u001b[38;5;66;03m# re-raise KeyboardInterrupt, to truncate traceback\u001b[39;00m\n\u001b[0;32m-> 1120\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyboardInterrupt\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mInterrupted by user\u001b[39m\u001b[38;5;124m\"\u001b[39m) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28mNone\u001b[39m\n\u001b[1;32m   1121\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m:\n\u001b[1;32m   1122\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mlog\u001b[38;5;241m.\u001b[39mwarning(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mInvalid Message:\u001b[39m\u001b[38;5;124m\"\u001b[39m, exc_info\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"]},"2":{"name":"stdout","text":"guess: 1234\nlol\nYour guess 4 is correct but placed wrong\nYour guess 3 is correct but placed wrong\nYou have 6 tries left\n"},"3":{"name":"input","opts":{"password":false,"prompt":""},"value":"5678"},"4":{"name":"stdout","text":"guess: 5678\nlol\nYou have 5 tries left\n"},"5":{"name":"input","opts":{"password":false,"prompt":""},"value":"3480"},"6":{"name":"stdout","text":"guess: 3480\nlol\nYour guess 4 is correct but placed wrong\nYour guess 3 is correct but placed wrong\nYour guess 0 is correct but placed wrong\nYou have 4 tries left\n"},"7":{"name":"input","opts":{"password":false,"prompt":""},"value":"4309"},"8":{"name":"stdout","text":"guess: 4309\nGreat! You got it right!\n"},"9":{"name":"input","opts":{"password":false,"prompt":""}}},"pos":19,"scrolled":false,"state":"done","type":"cell"}
{"cell_type":"code","id":"ce4e63","input":"#check if the user's guess is correct\nif userguess == answer and count == 0:\n    \n    print('Great! You only needed 1 try! You are a cheater :(')\nelse:    \n    print('lol')\n    number_string= str(answer)\n    user_string= str(userguess)\n    for i in range(len(userguess)):\n        if number_string[i] == user_string[i]:\n               print('Your guess',number_string[i],'at position', i+1 ,'was correct!')\n        elif number_string[i] in  user_string:\n               print('Your guess',number_string[i],'is correct but placed wrong')\n    count+=1\nprint(count)\n\n#Otherwise, reveal which digits or numbers the user got correct - HINT: use string typecasting to determine which specific numbers are correct!","kernel":"cv_env","metadata":{"id":"ustwEFoqFkWO"},"pos":15,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"03d4d8","input":"We may want to convert to different data types for processing data. Strings are one way to process numbers digit by digit.","metadata":{"id":"86uGwcGTH_Hb"},"pos":5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"0f3bd6","input":"The reason why strings are powerful for processing numbers digit by digit is because they can be accessed like lists.","metadata":{"id":"G823cceuHqRv"},"pos":7,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"13144b","input":"## Put it all together\n\nCombine all of your code from the previous steps below to make one smooth running program that will let a user play mastermind!\n\n","metadata":{"id":"MO1CHHGrSjHn"},"pos":18,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"28c135","input":"# Welcome to **MASTERMIND**\n\nToday we will be creating Mastermind, a classic game similar to Wordle. The steps of Mastermind are as follows:\n\n*   The computer plays first by setting a 4-digit number.\n*   The user now tries their first attempt at guessing the number.\n*   If the user succeeds in their first attempt (despite odds which are highly unlikely) they win the game and is crowned Mastermind! If not, then the computer hints by revealing which digits or numbers the user got correct.\n*   The game continues till the user eventually is able to guess the number entirely.\n\n\n","metadata":{"id":"FIl5ePMRnNbH"},"pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"5523ff","input":"## Step 2: Get the user's guess\n\nThe user is now going to try to guess the 4-digit number. You should get `input()` from the user and set their guess to an integer. \n\nIf you run into issues, try to google how to get integer input from a user in python!\n\n","metadata":{"id":"yl0IqDTEEzHB"},"pos":12,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"556e15","input":"## Some Python Background: Typecasting & Strings\n\nIn this project, we will most likely use some typecasting. This is where you convert (or *cast*) a piece of data to a certain data type, such as a string or integer. Some of the code below could be useful for you on this project. \n\n","metadata":{"id":"PyCFDcrEGhpg"},"pos":1,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"7cf25a","input":"## Step 3: See if the user succeeds in first try\n\nIn this part, we need to check `if` the user's guess is correct and equal to the random four-digit integer the computer generated.\n\nIf the user's guess is correct, you should output something like: \n\n> \"Great! You only needed 1 try! You're a Mastermind!\"\n\nElse, then the computer hints by revealing which digits or numbers the user got correct.\n\n","metadata":{"id":"gxclhNPSFYdB"},"pos":14,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"9e7c2f","input":"## Step 1: Setting a four digit number\n\nFor this step, our program needs to set a random 4-digit number for the user to guess. It would make sense that this number is any number inbetween 1000 and 9999 right? \n\nWe recommend checking out how to get random numbers in python. Maybe a google search of \"Get a random number in a certain range python\" is a good start. You should set this number to a variable to save for later. If you are stuck, look back at our old projects\n\n","metadata":{"id":"MywCq7XjDo7z"},"pos":10,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"baf160","input":"If you want to go further, you can find the next instructions here - https://www.geeksforgeeks.org/mastermind-game-using-python/\n\n","pos":20,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"f9d119","input":"# Step 4: Continue in a loop.\n\nWhen our user is wrong, we need to let them guess again and keep a `count` of how many guesses they have used so far. We will keep looping until our user's guess is equal to the hidden number.\n\nFor repetitive tasks in python, we usually use a `while` or a `for` loop. `While` loops continue executing code in a loop until a certain condition is met, and `for` loops typically are used for iterating across a piece of data. \n\n> DISCUSS: Discuss with your team and instructor which type of  loop would be better for this case.\n\n","metadata":{"id":"pSDfXUdfGD1u"},"pos":16,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"ffa3c4","input":"Typecasting lets us convert a piece of data to a different data type. ","metadata":{"id":"Q3-oqvm8H6fI"},"pos":3,"state":"done","type":"cell"}
{"end":1660060284244,"exec_count":5,"id":"079308","input":"n = str(input())\nn[0]","kernel":"cv_env","no_halt":true,"output":{"0":{"name":"input","opts":{"password":false,"prompt":""},"value":"26"},"1":{"data":{"text/plain":"'2'"},"exec_count":5}},"pos":8.5,"start":1660060277455,"state":"done","type":"cell"}
{"end":1660061056149,"exec_count":18,"id":"c6019e","input":"import numpy as np","kernel":"cv_env","pos":0.5,"start":1660061055893,"state":"done","type":"cell"}
{"end":1660064832888,"id":"6e77bd","input":"print(number)","kernel":"cv_env","pos":19.5,"start":1660064832888,"state":"done","type":"cell"}
{"id":"0155a7","input":"","pos":13.25,"type":"cell"}
{"id":"30e73a","input":"","pos":13.5,"type":"cell"}
{"id":0,"time":1660065314820,"type":"user"}
{"last_load":1660053947617,"type":"file"}